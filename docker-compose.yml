version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: intellimcp_postgres
    environment:
      POSTGRES_DB: intellimcp_dev
      POSTGRES_USER: devuser
      POSTGRES_PASSWORD: devpassword
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8 --lc-collate=C --lc-ctype=C"
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./postgres/init:/docker-entrypoint-initdb.d
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U devuser -d intellimcp_dev"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - intellimcp_network
    restart: unless-stopped

  # ChromaDB Vector Store
  chromadb:
    image: chromadb/chroma:latest
    container_name: intellimcp_chromadb
    environment:
      - CHROMA_SERVER_HOST=0.0.0.0
      - CHROMA_SERVER_PORT=8000
      - CHROMA_SERVER_LOG_LEVEL=INFO
      - PERSIST_DIRECTORY=/chroma/chroma
    ports:
      - "8000:8000"
    volumes:
      - chromadb_data:/chroma/chroma
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/api/v1/heartbeat"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - intellimcp_network
    restart: unless-stopped

  # Backend API
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: intellimcp_backend
    environment:
      - DATABASE_URL=postgresql://devuser:devpassword@postgres:5432/intellimcp_dev
      - CHROMA_HOST=chromadb
      - CHROMA_PORT=8000
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - CLERK_SECRET_KEY=${CLERK_SECRET_KEY}
    ports:
      - "8080:8080"
    volumes:
      - ./backend:/app
      - backend_logs:/app/logs
    depends_on:
      postgres:
        condition: service_healthy
      chromadb:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - intellimcp_network
    restart: unless-stopped

  # Frontend Application
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: intellimcp_frontend
    environment:
      - NEXT_PUBLIC_BACKEND_API_URL=http://localhost:8080
      - NEXT_PUBLIC_CLERK_PUBLISHABLE_KEY=${NEXT_PUBLIC_CLERK_PUBLISHABLE_KEY}
    ports:
      - "3000:3000"
    volumes:
      - ./frontend:/app
      - /app/node_modules
      - /app/.next
    depends_on:
      - backend
    networks:
      - intellimcp_network
    restart: unless-stopped

  # Redis for Caching (Optional)
  redis:
    image: redis:7-alpine
    container_name: intellimcp_redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 3
    networks:
      - intellimcp_network
    restart: unless-stopped

  # Nginx Reverse Proxy (Optional)
  nginx:
    image: nginx:alpine
    container_name: intellimcp_nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./nginx/ssl:/etc/nginx/ssl
    depends_on:
      - frontend
      - backend
    networks:
      - intellimcp_network
    restart: unless-stopped

volumes:
  postgres_data:
    driver: local
  chromadb_data:
    driver: local
  backend_logs:
    driver: local
  redis_data:
    driver: local

networks:
  intellimcp_network:
    driver: bridge 